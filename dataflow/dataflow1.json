{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_cases_deaths_transform",
						"type": "DatasetReference"
					},
					"name": "sourcetransform"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "countrylookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Processed_casesANDDEaths",
						"type": "DatasetReference"
					},
					"name": "CasesANDDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "selectonlyrecords"
				},
				{
					"name": "pivotcounts"
				},
				{
					"name": "lookupfilter"
				},
				{
					"name": "selectforsink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcetransform",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrylookup",
				"sourcetransform filter(continent == 'Asia' && not(isNull(country_code))) ~> filter1",
				"filter1 select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_'+'date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectonlyrecords",
				"selectonlyrecords pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotcounts",
				"pivotcounts, countrylookup lookup(pivotcounts@country == countrylookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupfilter",
				"lookupfilter select(mapColumn(",
				"          country = pivotcounts@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotcounts@population,",
				"          cases_count = {confirmed cases_count},",
				"          deaths_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectforsink",
				"selectforsink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesANDDeathsSink"
			]
		}
	}
}